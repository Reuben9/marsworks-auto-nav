// Generated by gencpp from file leo_msgs/SetImuCalibrationRequest.msg
// DO NOT EDIT!


#ifndef LEO_MSGS_MESSAGE_SETIMUCALIBRATIONREQUEST_H
#define LEO_MSGS_MESSAGE_SETIMUCALIBRATIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace leo_msgs
{
template <class ContainerAllocator>
struct SetImuCalibrationRequest_
{
  typedef SetImuCalibrationRequest_<ContainerAllocator> Type;

  SetImuCalibrationRequest_()
    : gyro_bias_x(0.0)
    , gyro_bias_y(0.0)
    , gyro_bias_z(0.0)  {
    }
  SetImuCalibrationRequest_(const ContainerAllocator& _alloc)
    : gyro_bias_x(0.0)
    , gyro_bias_y(0.0)
    , gyro_bias_z(0.0)  {
  (void)_alloc;
    }



   typedef double _gyro_bias_x_type;
  _gyro_bias_x_type gyro_bias_x;

   typedef double _gyro_bias_y_type;
  _gyro_bias_y_type gyro_bias_y;

   typedef double _gyro_bias_z_type;
  _gyro_bias_z_type gyro_bias_z;





  typedef boost::shared_ptr< ::leo_msgs::SetImuCalibrationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::leo_msgs::SetImuCalibrationRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetImuCalibrationRequest_

typedef ::leo_msgs::SetImuCalibrationRequest_<std::allocator<void> > SetImuCalibrationRequest;

typedef boost::shared_ptr< ::leo_msgs::SetImuCalibrationRequest > SetImuCalibrationRequestPtr;
typedef boost::shared_ptr< ::leo_msgs::SetImuCalibrationRequest const> SetImuCalibrationRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::leo_msgs::SetImuCalibrationRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::leo_msgs::SetImuCalibrationRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::leo_msgs::SetImuCalibrationRequest_<ContainerAllocator1> & lhs, const ::leo_msgs::SetImuCalibrationRequest_<ContainerAllocator2> & rhs)
{
  return lhs.gyro_bias_x == rhs.gyro_bias_x &&
    lhs.gyro_bias_y == rhs.gyro_bias_y &&
    lhs.gyro_bias_z == rhs.gyro_bias_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::leo_msgs::SetImuCalibrationRequest_<ContainerAllocator1> & lhs, const ::leo_msgs::SetImuCalibrationRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace leo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::leo_msgs::SetImuCalibrationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::leo_msgs::SetImuCalibrationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leo_msgs::SetImuCalibrationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leo_msgs::SetImuCalibrationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leo_msgs::SetImuCalibrationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leo_msgs::SetImuCalibrationRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::leo_msgs::SetImuCalibrationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "98c719532707e923d1c05a91573cc24a";
  }

  static const char* value(const ::leo_msgs::SetImuCalibrationRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x98c719532707e923ULL;
  static const uint64_t static_value2 = 0xd1c05a91573cc24aULL;
};

template<class ContainerAllocator>
struct DataType< ::leo_msgs::SetImuCalibrationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "leo_msgs/SetImuCalibrationRequest";
  }

  static const char* value(const ::leo_msgs::SetImuCalibrationRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::leo_msgs::SetImuCalibrationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 gyro_bias_x\n"
"float64 gyro_bias_y\n"
"float64 gyro_bias_z\n"
;
  }

  static const char* value(const ::leo_msgs::SetImuCalibrationRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::leo_msgs::SetImuCalibrationRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gyro_bias_x);
      stream.next(m.gyro_bias_y);
      stream.next(m.gyro_bias_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetImuCalibrationRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::leo_msgs::SetImuCalibrationRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::leo_msgs::SetImuCalibrationRequest_<ContainerAllocator>& v)
  {
    s << indent << "gyro_bias_x: ";
    Printer<double>::stream(s, indent + "  ", v.gyro_bias_x);
    s << indent << "gyro_bias_y: ";
    Printer<double>::stream(s, indent + "  ", v.gyro_bias_y);
    s << indent << "gyro_bias_z: ";
    Printer<double>::stream(s, indent + "  ", v.gyro_bias_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEO_MSGS_MESSAGE_SETIMUCALIBRATIONREQUEST_H
