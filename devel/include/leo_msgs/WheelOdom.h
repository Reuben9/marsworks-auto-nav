// Generated by gencpp from file leo_msgs/WheelOdom.msg
// DO NOT EDIT!


#ifndef LEO_MSGS_MESSAGE_WHEELODOM_H
#define LEO_MSGS_MESSAGE_WHEELODOM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace leo_msgs
{
template <class ContainerAllocator>
struct WheelOdom_
{
  typedef WheelOdom_<ContainerAllocator> Type;

  WheelOdom_()
    : stamp()
    , velocity_lin(0.0)
    , velocity_ang(0.0)
    , pose_x(0.0)
    , pose_y(0.0)
    , pose_yaw(0.0)  {
    }
  WheelOdom_(const ContainerAllocator& _alloc)
    : stamp()
    , velocity_lin(0.0)
    , velocity_ang(0.0)
    , pose_x(0.0)
    , pose_y(0.0)
    , pose_yaw(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef float _velocity_lin_type;
  _velocity_lin_type velocity_lin;

   typedef float _velocity_ang_type;
  _velocity_ang_type velocity_ang;

   typedef float _pose_x_type;
  _pose_x_type pose_x;

   typedef float _pose_y_type;
  _pose_y_type pose_y;

   typedef float _pose_yaw_type;
  _pose_yaw_type pose_yaw;





  typedef boost::shared_ptr< ::leo_msgs::WheelOdom_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::leo_msgs::WheelOdom_<ContainerAllocator> const> ConstPtr;

}; // struct WheelOdom_

typedef ::leo_msgs::WheelOdom_<std::allocator<void> > WheelOdom;

typedef boost::shared_ptr< ::leo_msgs::WheelOdom > WheelOdomPtr;
typedef boost::shared_ptr< ::leo_msgs::WheelOdom const> WheelOdomConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::leo_msgs::WheelOdom_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::leo_msgs::WheelOdom_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::leo_msgs::WheelOdom_<ContainerAllocator1> & lhs, const ::leo_msgs::WheelOdom_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.velocity_lin == rhs.velocity_lin &&
    lhs.velocity_ang == rhs.velocity_ang &&
    lhs.pose_x == rhs.pose_x &&
    lhs.pose_y == rhs.pose_y &&
    lhs.pose_yaw == rhs.pose_yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::leo_msgs::WheelOdom_<ContainerAllocator1> & lhs, const ::leo_msgs::WheelOdom_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace leo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::leo_msgs::WheelOdom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::leo_msgs::WheelOdom_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leo_msgs::WheelOdom_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leo_msgs::WheelOdom_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leo_msgs::WheelOdom_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leo_msgs::WheelOdom_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::leo_msgs::WheelOdom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5bb892afaf24a6d3bedf13c8fe986f2a";
  }

  static const char* value(const ::leo_msgs::WheelOdom_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5bb892afaf24a6d3ULL;
  static const uint64_t static_value2 = 0xbedf13c8fe986f2aULL;
};

template<class ContainerAllocator>
struct DataType< ::leo_msgs::WheelOdom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "leo_msgs/WheelOdom";
  }

  static const char* value(const ::leo_msgs::WheelOdom_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::leo_msgs::WheelOdom_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message represents the pose and velocity of a differential wheeled robot, estimated from the wheel encoders.\n"
"#\n"
"# The velocity_* fields represent the linear and angular velocity of the robot.\n"
"# The pose_* fields represent the x, y and yaw pose of the robot w.r.t. the starting pose.\n"
"#\n"
"# The coordinate frame that represents the robot is located at the center of rotation.\n"
"\n"
"time stamp\n"
"float32 velocity_lin\n"
"float32 velocity_ang\n"
"float32 pose_x\n"
"float32 pose_y\n"
"float32 pose_yaw\n"
;
  }

  static const char* value(const ::leo_msgs::WheelOdom_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::leo_msgs::WheelOdom_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.velocity_lin);
      stream.next(m.velocity_ang);
      stream.next(m.pose_x);
      stream.next(m.pose_y);
      stream.next(m.pose_yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WheelOdom_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::leo_msgs::WheelOdom_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::leo_msgs::WheelOdom_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "velocity_lin: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_lin);
    s << indent << "velocity_ang: ";
    Printer<float>::stream(s, indent + "  ", v.velocity_ang);
    s << indent << "pose_x: ";
    Printer<float>::stream(s, indent + "  ", v.pose_x);
    s << indent << "pose_y: ";
    Printer<float>::stream(s, indent + "  ", v.pose_y);
    s << indent << "pose_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.pose_yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEO_MSGS_MESSAGE_WHEELODOM_H
